[
    //
    // Bold and italic (*)
    //
    // insert to *|* where `|` is the selection (or the cursor)
   {
        "keys": ["*"],
        "command": "insert_snippet",
        "args": {
            "contents": "*${0:$SELECTION}*"
        },
        "context": [
            {
              "operand": "text.html.markdown",
              "operator": "equal",
              "match_all": true,
              "key": "selector"
            },
        ]
    }
    // move the cursor forward
    , { "keys": ["*"], "command": "move", "args": { "by": "characters", "forward": true }, "context":
        [
            { "key": "selector", "operator": "equal", "operand": "text.html.markdown" }
            , { "key": "following_text", "operator": "regex_contains", "operand": "^\\*" }
        ]
    }
    // add two ** when inside **: *|* -> **|**
    , { "keys": ["*"], "command": "insert_snippet", "args": { "contents": "*$0*" }, "context":
        [
            { "key": "selector", "operator": "equal", "operand": "text.html.markdown" }
            , { "key": "following_text", "operator": "regex_contains", "operand": "^\\*" }
            , { "key": "preceding_text", "operator": "regex_contains", "operand": "^\\*$" }
        ]
    }
    , { "keys": ["*"], "command": "insert_snippet", "args": { "contents": "*$0*" }, "context":
        [
            { "key": "selector", "operator": "equal", "operand": "text.html.markdown" }
            , { "key": "following_text", "operator": "regex_contains", "operand": "^\\*" }
            , { "key": "preceding_text", "operator": "regex_contains", "operand": "\\s\\*$" }
        ]
    }
    // delete left right: *|* -> |
    , { "keys": ["backspace"], "command": "run_macro_file", "args": { "file": "res://Packages/Default/Delete Left Right.sublime-macro"},
        "context": [
            { "key": "selector", "operator": "equal", "operand": "text.html.markdown" }
            , { "key": "following_text", "operator": "regex_contains", "operand": "^\\*" }
            , { "key": "preceding_text", "operator": "regex_contains", "operand": "\\*$" }
        ]
    }

    //
    // lists
    //

    , {
        "keys": ["enter"],
        "command": "markdown_keyboard_run",
        "args": {
            "command": "list"
        },
        "context": [
            {
                "key": "selector",
                "match_all": true,
                "operator": "equal",
                "operand": "markup.list, markup.quote.markdown"
            }
            , {
                "key": "selector",
                "match_all": true,
                "operator": "equal",
                "operand": "text.html.markdown"
            }
            , {
                "key": "preceding_text",
                "operator": "regex_match",
                "operand": "^.+$"
            }
            , {
                "key": "following_text",
                "operator": "regex_match",
                "operand": "^$"
            },
        ]
    }

    , {
        "keys": ["backspace"],
        "command": "run_macro_file",
        "args": {
            "file": "res://Packages/md-keyboard/remove-ligne.sublime-macro"
        },
        // "command": "markdown_keyboard_run",
        // "args": {
        //     "command": "remove_list_element"
        // },
        "context": [
            {
                "key": "selector",
                "operator": "equal",
                "operand": "markup.list, markup.quote.markdown"
            }
            , {
                "key": "selection_empty",
                "operator": "equal",
                "operand": true
            }
            , {
                "key": "selector",
                "match_all": true,
                "operator": "equal",
                "operand": "text.html.markdown"
            }
            , {
                "key": "preceding_text",
                "operator": "regex_contains",
                "operand": "([\\-\\+\\*>]|[0-9]+\\.) $",
                "match_all": true
            }
        ]
    }

    , {
        "keys": ["f3"],
        "command": "message_dialog",
        "args": {
            "text": "running"
        },
        "context": [
            {
                "key": "preceding_text",
                "operator": "regex_match",
                "operand": "^$"
            },
            {
                "key": "following_text",
                "operator": "regex_match",
                "operand": "^$"
            },
        ]
    },

    {
        "keys": ["f8"],
        "command": "markdown_keyboard_run",
        "args": {
            "command": "reorder_list"
        },
    }


]