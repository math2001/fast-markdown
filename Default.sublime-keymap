[
    //
    // Bold and italic (*)
    //
    // insert to *|* where `|` is the selection (or the cursor)
    {
        "keys": ["*"],
        "command": "insert_snippet",
        "args": {
            "contents": "*${0:$SELECTION}*"
        },
        "context": [
            {
              "operand": "text.html.markdown",
              "operator": "equal",
              "match_all": true,
              "key": "selector"
            },
            {
                "key": "selection_empty",
                "operator": "equal",
                "operand": false
            },
            {
                "key": "selector",
                "operator": "not_equal",
                "operand": "markup.bold.markdown"
            }
        ]
    },
    // move the cursor forward
    { "keys": ["*"], "command": "move", "args": { "by": "characters", "forward": true }, "context":
        [
            { "key": "selector", "operator": "equal", "operand": "text.html.markdown" },
            { "key": "selector", "operator": "equal", "operand": "markup.bold.markdown, markup.italic.markdown" },
            { "key": "following_text", "operator": "regex_contains", "operand": "^\\*" }
        ]
    },
    // move the cursor forward too.
    { "keys": ["*"], "command": "move", "args": { "by": "characters", "forward": true }, "context":
        [
            { "key": "selector", "operator": "equal", "operand": "text.html.markdown" },
            { "key": "selector", "operator": "equal", "operand": "markup.bold.markdown" },
            { "key": "selection_empty", "match_all": true, "operator": "equal", "operand": false }

        ]
    },
    { "keys": ["*"], "command": "insert_snippet", "args": { "contents": "*" }, "context":
        [
            { "key": "following_text", "operator": "regex_contains", "operand": "^\\*" },
            { "key": "preceding_text", "operator": "regex_contains", "operand": "[\\\\ ]$" },
            { "key": "selector", "operator": "equal", "operand": "text.html.markdown" }
        ]
    },
    // add two ** when inside **: *|* -> **|**
    { "keys": ["*"], "command": "insert_snippet", "args": { "contents": "*$0*" }, "context":
        [
            { "key": "selector", "operator": "equal", "operand": "text.html.markdown" },
            { "key": "selector", "operator": "not_equal", "operand": "markup.bold.markdown, markup.italic.markdown" },
            { "key": "selection_empty", "operator": "equal", "operand": true },
            // { "key": "preceding_text", "operator": "not_regex_contains", "operand": "\\s$" }
        ]
    },
    // delete left right: *|* -> |
    { "keys": ["backspace"], "command": "run_macro_file", "args": { "file": "res://Packages/Default/Delete Left Right.sublime-macro"},
        "context": [
            { "key": "selector", "operator": "equal", "operand": "text.html.markdown" }
            , { "key": "following_text", "operator": "regex_contains", "operand": "^\\*" }
            , { "key": "preceding_text", "operator": "regex_contains", "operand": "\\*$" }
        ]
    },

    //
    // lists
    //

    { "keys": ["enter"], "command": "fast_markdown", "args": { "action": "insert_new_list_item" }, "context":
        [
            {
                "key": "selector",
                "match_all": true,
                "operator": "equal",
                "operand": "markup.list"
            }
            , {
                "key": "selector",
                "match_all": true,
                "operator": "equal",
                "operand": "text.html.markdown"
            }
            , {
                "key": "preceding_text",
                "operator": "regex_match",
                "operand": "^.+$"
            }
            , {
                "key": "following_text",
                "operator": "regex_match",
                "operand": "^$"
            }
        ]
    },
    // { "keys": ["backspace"], "command": "run_macro_file", "args": { "file": "res://Packages/fast-markdown/remove-ligne.sublime-macro" }, "context":
    //     [
    //         {
    //             "key": "selector",
    //             "operator": "equal",
    //             "operand": "markup.list"
    //         }
    //         , {
    //             "key": "selection_empty",
    //             "operator": "equal",
    //             "operand": true
    //         }
    //         , {
    //             "key": "selector",
    //             "match_all": true,
    //             "operator": "equal",
    //             "operand": "text.html.markdown"
    //         }
    //         , {
    //             "key": "preceding_text",
    //             "operator": "regex_contains",
    //             "operand": "^\\s*([\\-\\+\\*>]|[0-9]+\\.) ?$",
    //             "match_all": true
    //         }
    //     ]
    // },
    { "keys": ["f3"], "command": "fast_markdown", "args": { "action": "reorder_lists" }, "context":
        [
            {
                "key": "selector",
                "operator": "equal",
                "operand": "meta.paragraph.list.markdown"
            }
        ]
    }

]
